/*
 * This file contains an example project. It is part of the
 * TaskJuggler project management tool. It uses a made up software
 * development project to demonstrate some of the basic features of
 * TaskJuggler. Please see the TaskJuggler manual for a more detailed
 * description of the various syntax elements.
 */
project acso "WDQS Graph Split"  2023-09-01 +2y {
  # Hide the clock time. Only show the date.
  timeformat "%Y-%m-%d"
  # Use US format for numbers
  numberformat "-" "" "," "." 1
  # Use US financial format for currency values. Don't show cents.
  currencyformat "(" ")" "," "." 0
  # Pick a day during the project that will be reported as 'today' in
  # the project reports. If not specified, the current day will be
  # used, but this will likely be outside of the project range, so it
  # can't be seen in the reports.
  # now 2022-12-12
  # The currency for all money values is the US Dollar.
  currency "USD"

  # We want to compare the baseline scenario to one with a slightly
  # delayed start.
  scenario plan "Plan" {
    scenario delayed "Delayed"
  }
  extend resource {
    text Phone "Phone"
  }
}

# Register Good Friday as a global holiday for all resources.
leaves holiday "Good Friday" 2002-03-29
flags team

# This is one way to form teams
macro allocate_developers [
  allocate dev1
  allocate dev2
  allocate dev3
]

resource dir "Olja Dimitrijevic"

resource em "Guillaume Lederrey" {
  managers dir
}

resource swe "Software Engineers" {
  managers em
  resource david "David Causse" {
  }
  resource adam "Adam Basso" {
    purge managers
    managers dir
  }
  resource erik "Erik Bernhardson" {
  }
  resource peter "Peter Fischer" {
  }
  flags team
}

resource sre "SRE" {
  managers em
  resource brian "Brian King" {
  }
  resource ryan "Ryan Kemper" {
  }
  flags team
}

# Now we specify the work packages. The whole project is described as
# a task that contains subtasks. These subtasks are then broken down
# into smaller tasks and so on. The innermost tasks describe the real
# work and have resources allocated to them. Many attributes of tasks
# are inherited from the enclosing task. This saves you a lot of typing.
task graph_split "WDQS Graph Split" {

  responsible em
  start ${projectstart}
  note "https://phabricator.wikimedia.org/T337013"

  task split_dump "Split dumps" {
    task code "Code to split the Wikidata dumps into 2 sub graphs" {
      start 2023-10-01
      end 2023-11-20
      note "https://phabricator.wikimedia.org/T347989"
      allocate adam
    }
    task export "Export graph split from Hive" {
      start 2023-11-29
      end 2023-12-07
      note "https://phabricator.wikimedia.org/T350106"
      depends !code
      allocate adam
    }
    task ready "Split dump ready for loading" {
      depends !export
    }
  }

  task test_server_setup "Setup test servers" {
    task setup "Initial configuration of test servers" {
      start 2023-10-04
      end 2023-10-20
      note "https://phabricator.wikimedia.org/T347505"
      allocate ryan
    }
    task data_load "Load data into test servers" {
      start 2023-12-07
      duration 4 w
      note "https://phabricator.wikimedia.org/T350465"
      depends graph_split.split_dump, !setup
      allocate ryan
    }
    task ready "Ready for internal testing" {
      depends !data_load
    }
  }

  task expose_test_servers "Expose test servers" {
    task expose "Expose test servers to the internet" {
      duration 2 w
      note "https://phabricator.wikimedia.org/T351650"
      depends graph_split.test_server_setup
      allocate ryan
    }
    task ready "Ready for external testing" {
      depends !expose
    }
  }

  task internal_testing "Internal testing" {
    task test_framework "Investigate and validate test frameworks" {
      start 2023-10-31
      end 2023-11-23
      note "https://phabricator.wikimedia.org/T349519"
      allocate david
    }

    task queries "Extract relevant queries from logs" {
      start 2023-10-31
      duration 2 m
      note "https://phabricator.wikimedia.org/T349512"
    }

    task test "Execute the tests" {
      start 2024-01-10
      duration 3 m
      depends graph_split.test_server_setup.ready, !test_framework, !queries
      allocate david
    }

    task refine "Refine split based on learnings" {
      duration 3 m
      depends graph_split.internal_testing.test { onstart }
      allocate david
    }

    task ready "WMF confident about the usability of the graph split" {
      depends !test, !refine
    }
  }

  task consultation "Community" {
    task consultation "Community consultation" {
      duration 6 m
      depends graph_split.expose_test_servers.ready
    }

    task ready "Communities are on board with the change" {
      depends !consultation
    }
  }

  task productionize "Productionize" {
    task update_process "Implementation of split graph update process" {
      duration 2 m
      depends graph_split.internal_testing.ready
      allocate david
    }

    task servers "Production servers received and configured" {
      start 2024-05-01
      duration 2 m
      allocate ryan
    }

    task ready "Ready for production traffic" {
      depends !update_process, !servers
    }
  }

  task rollout "Rollout" {
    task migration "Tools and workflows migration, by our community, with support from WMF" {
      duration 6 m
      depends graph_split.consultation.ready, graph_split.productionize.ready
    }
    task load_transfer "Progressively migrate load to split graph clusters" {
      duration 6 m
      depends graph_split.consultation.ready, graph_split.productionize.ready
    }
    task decommission "Decommission the full graph endpoint" {
      duration 1 m
      depends !migration, !load_transfer
      allocate ryan
    }
    task done "Graph Split fully deployed and graph size risk mitigated" {
      depends !migration, !decommission
    }
  }

}


# Now the project has been specified completely. Stopping here would
# result in a valid TaskJuggler file that could be processed and
# scheduled. But no reports would be generated to visualize the
# results.

navigator navbar {
  hidereport @none
}

macro TaskTip [
  tooltip istask() -8<-
    '''Start: ''' <-query attribute='start'->
    '''End: ''' <-query attribute='end'->
    ----
    '''Notes:''' <-query attribute='note' ->
    ----
    '''Resources:'''

    <-query attribute='resources'->
    ----
    '''Precursors: '''

    <-query attribute='precursors'->
    ----
    '''Followers: '''

    <-query attribute='followers'->
    ->8-
]

textreport frame "" {
  header -8<-
    == WDQS Graph Split ==
    <[navigator id="navbar"]>
  ->8-
  footer "----"
  textreport index "Overview" {
    formats html
    center '<[report id="overview"]>'
  }

  textreport "Status" {
    formats html
    center -8<-
      <[report id="status.dashboard"]>
      ----
      <[report id="status.completed"]>
      ----
      <[report id="status.ongoing"]>
      ----
      <[report id="status.future"]>
    ->8-
  }

  textreport "Deliveries" {
    formats html
    center '<[report id="deliveries"]>'
  }

  textreport "ContactList" {
    formats html
    title "Contact List"
    center '<[report id="contactList"]>'
  }

}

# A traditional Gantt chart with a project overview.
taskreport overview "" {
  header -8<-
    === Project Overview ===

  ->8-
  columns bsi { title 'WBS' },
          #note,
          name, start, end,
          chart { ${TaskTip} }
  timeformat "%Y-%m-%d"
  loadunit days
  hideresource @all

  footer -8<-
    === Current Status ===
    N/A
  ->8-
}

# Macro to set the background color of a cell according to the alert
# level of the task.
macro AlertColor [
  cellcolor plan.alert = 0 "#90FF90" # green
  cellcolor plan.alert = 1 "#FFFF90" # yellow
  cellcolor plan.alert = 2 "#FF9090" # red
]

taskreport status "" {
  columns bsi { width 50 title 'WBS' }, name { width 150 },
          start { width 100 }, end { width 100 },
          effort { width 100 },
          alert { tooltip plan.journal
                          != '' "<-query attribute='journal'->" width 150 },
          status { width 150 }
  scenarios delayed

  taskreport dashboard "" {
    headline "Project Dashboard (<-query attribute='now'->)"
    columns name { title "Task" ${AlertColor} width 200},
            resources { width 200 ${AlertColor}
                        listtype bullets
                        listitem "<-query attribute='name'->"
                        start ${projectstart} end ${projectend} },
            alerttrend { title "Trend" ${AlertColor} width 50 },
            journal { width 350 ${AlertColor} }
    journalmode status_up
    journalattributes headline, author, date, summary, details
    hidetask ~hasalert(0)
    sorttasks alert.down, delayed.end.up
    period %{${now} - 1w} +1w
  }
  taskreport completed "" {
    headline "Already completed tasks"
    hidetask ~(delayed.end <= ${now})
  }
  taskreport ongoing "" {
    headline "Ongoing tasks"
    hidetask ~((delayed.start <= ${now}) & (delayed.end > ${now}))
  }
  taskreport future "" {
    headline "Future tasks"
    hidetask ~(delayed.start > ${now})
  }
}

# A list of all tasks with the percentage completed for each task
taskreport deliveries "" {
  headline "Project Deliverables"
  columns bsi { title 'WBS' }, name, start, end, note { width 150 }, complete,
          chart { ${TaskTip} }
  taskroot graph_split
  hideresource @all
  scenarios plan, delayed
}
# A list of all employees with their contact details.
resourcereport contactList "" {
  scenarios delayed
  headline "Contact list and duty plan"
  columns name,
          email { celltext 1 "[mailto:<-email-> <-email->]" },
          Phone,
          managers { title "Manager" },
          chart { scale day }
  hideresource ~isleaf()
  sortresources name.up
  hidetask @all
}

# A graph showing resource allocation. It identifies whether each
# resource is under- or over-allocated for.
resourcereport resourceGraph "" {
  scenarios delayed
  headline "Resource Allocation Graph"
  columns no, name, effort, rate, weekly { ${TaskTip} }
  loadunit shortauto
  # We only like to show leaf tasks for leaf resources.
  hidetask ~(isleaf() & isleaf_())
  sorttasks plan.start.up
}

